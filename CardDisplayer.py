#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    May 18, 2022 08:42:25 PM PDT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import CardDisplayer_support
import Card

class CardDisplayer:
    def __init__(self, top, thisCard: Card.Card):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40' # X11 color: #666666
        _ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
        _ana2color = 'beige' # X11 color: #f5f5dc
        _tabfg1 = 'black' 
        _tabfg2 = 'black' 
        _tabbg1 = 'grey75' 
        _tabbg2 = 'grey89' 
        _bgmode = 'light' 

        top.geometry("600x518+917+372")
        top.minsize(120, 1)
        top.maxsize(2564, 1421)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.textTitle = tk.Text(self.top)
        self.textTitle.insert(END, thisCard.title)
        self.textTitle.place(relx=0.033, rely=0.058, relheight=0.075
                , relwidth=0.49)
        self.textTitle.configure(background="white")
        self.textTitle.configure(font="TkTextFont")
        self.textTitle.configure(foreground="black")
        self.textTitle.configure(highlightbackground="#d9d9d9")
        self.textTitle.configure(highlightcolor="black")
        self.textTitle.configure(insertbackground="black")
        self.textTitle.configure(selectbackground="#c4c4c4")
        self.textTitle.configure(selectforeground="black")
        self.textTitle.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.textTitleToolTip = \
        ToolTip(self.textTitle, self.tooltip_font, '''卡片标题''')

        self.frameTag = tk.Frame(self.top)
        self.frameTag.place(relx=0.033, rely=0.156, relheight=0.122
                , relwidth=0.908)
        self.frameTag.configure(relief='groove')
        self.frameTag.configure(borderwidth="2")
        self.frameTag.configure(relief="groove")
        self.frameTag.configure(background="#d9d9d9")
        self.frameTag.configure(highlightbackground="#d9d9d9")
        self.frameTag.configure(highlightcolor="black")

        self.textTag = tk.Text(self.frameTag)
        self.textTag.place(relx=0.018, rely=0.365, relheight=0.429
                , relwidth=0.117)
        self.textTag.configure(background="white")
        self.textTag.configure(font="TkTextFont")
        self.textTag.configure(foreground="black")
        self.textTag.configure(highlightbackground="#d9d9d9")
        self.textTag.configure(highlightcolor="black")
        self.textTag.configure(insertbackground="black")
        self.textTag.configure(selectbackground="#c4c4c4")
        self.textTag.configure(selectforeground="black")
        self.textTag.configure(wrap="word")

        self.buttonAddTag = tk.Button(self.frameTag)
        self.buttonAddTag.place(relx=0.771, rely=0.365, height=24, width=47)
        self.buttonAddTag.configure(activebackground="beige")
        self.buttonAddTag.configure(activeforeground="#000000")
        self.buttonAddTag.configure(background="#d9d9d9")
        self.buttonAddTag.configure(compound='left')
        self.buttonAddTag.configure(disabledforeground="#a3a3a3")
        self.buttonAddTag.configure(foreground="#000000")
        self.buttonAddTag.configure(highlightbackground="#d9d9d9")
        self.buttonAddTag.configure(highlightcolor="black")
        self.buttonAddTag.configure(pady="0")
        self.buttonAddTag.configure(text='''Button''')

        self.buttonDeleteTag = tk.Button(self.frameTag)
        self.buttonDeleteTag.place(relx=0.881, rely=0.365, height=24, width=47)
        self.buttonDeleteTag.configure(activebackground="beige")
        self.buttonDeleteTag.configure(activeforeground="#000000")
        self.buttonDeleteTag.configure(background="#d9d9d9")
        self.buttonDeleteTag.configure(compound='left')
        self.buttonDeleteTag.configure(disabledforeground="#a3a3a3")
        self.buttonDeleteTag.configure(foreground="#000000")
        self.buttonDeleteTag.configure(highlightbackground="#d9d9d9")
        self.buttonDeleteTag.configure(highlightcolor="black")
        self.buttonDeleteTag.configure(pady="0")
        self.buttonDeleteTag.configure(text='''Button''')

        self.labelCardId = tk.Label(self.top)
        self.labelCardId.place(relx=0.717, rely=0.044, height=24, width=124)
        self.labelCardId.configure(activebackground="#f9f9f9")
        self.labelCardId.configure(anchor='w')
        self.labelCardId.configure(background="#d9d9d9")
        self.labelCardId.configure(compound='left')
        self.labelCardId.configure(disabledforeground="#a3a3a3")
        self.labelCardId.configure(foreground="#000000")
        self.labelCardId.configure(highlightbackground="#d9d9d9")
        self.labelCardId.configure(highlightcolor="black")
        self.labelCardId.configure(text="卡片ID：" + str(thisCard.cardId))

        self.textContent = tk.Text(self.top)
        self.textContent.insert(END, thisCard.content)
        self.textContent.place(relx=0.033, rely=0.332, relheight=0.477
                , relwidth=0.907)
        self.textContent.configure(background="white")
        self.textContent.configure(font="TkTextFont")
        self.textContent.configure(foreground="black")
        self.textContent.configure(highlightbackground="#d9d9d9")
        self.textContent.configure(highlightcolor="black")
        self.textContent.configure(insertbackground="black")
        self.textContent.configure(selectbackground="#c4c4c4")
        self.textContent.configure(selectforeground="black")
        self.textContent.configure(wrap="word")

        self.buttonSave = tk.Button(self.top)
        self.buttonSave.place(relx=0.833, rely=0.927, height=24, width=47)
        self.buttonSave.configure(activebackground="beige")
        self.buttonSave.configure(activeforeground="#000000")
        self.buttonSave.configure(background="#d9d9d9")
        self.buttonSave.configure(command=CardDisplayer_support.buttonSaveClick)
        self.buttonSave.configure(compound='left')
        self.buttonSave.configure(disabledforeground="#a3a3a3")
        self.buttonSave.configure(foreground="#000000")
        self.buttonSave.configure(highlightbackground="#d9d9d9")
        self.buttonSave.configure(highlightcolor="black")
        self.buttonSave.configure(pady="0")
        self.buttonSave.configure(text='''Save''')

# Support code for Balloon Help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
from time import time, localtime, strftime
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')
    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)
    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()
    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)
    def hide(self, event=None):
        self.visible = 0
        self.withdraw()
    def update(self, msg):
        self.msgVar.set(msg)
#                   End of Class ToolTip